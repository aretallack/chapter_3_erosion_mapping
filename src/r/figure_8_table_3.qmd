---
title: "Figure_5_Consistency"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup

# Load packages
pacman::p_load(tidyverse, terra, sf)
# Load functions
source("./src/r/functions.r") 
# Load data
dem_paths <- c(
  "./data/differenced/sfm/20210506_20210505_Deep_RGB_35_diff.tif",
  "./data/differenced/sfm/20210506_20210505_Deep_RGB_70_diff.tif",
  "./data/differenced/sfm/20210506_20210505_Deep_RGB_110_diff.tif",
  "./data/differenced/lidar/20210317_20210316_Deep_LiDAR_diff.tif",
  "./data/differenced/lidar/20210318_20210316_Shallow_LiDAR_diff.tif"
)
rasters <- lapply(dem_paths, rast)
deep_mask <- read_sf("./data/shp/Boolcoomatta_DeepGully_Boundary.gpkg")
shallow_mask <- read_sf("./data/shp/Boolcoomatta_ShallowGully_Boundary.gpkg")
rasters[1:4] <- lapply(rasters[1:4], \(x) mask(x, st_buffer(deep_mask, -0.1)))
# Mask rasters in 10 cm - removes issues with edge pixels from resampling
rasters[[5]] <- mask(rasters[[5]], st_buffer(shallow_mask, -0.1))
sample_zones <- vect("./outputs/shp/sample_zones.gpkg")
```

```{r}
px_vals_flat <- extract_pixels(rasters, sample_zones) %>% 
  filter(class == "Flat Surfaces")

px_vals_flat <- px_vals_flat %>% 
  mutate(method = ifelse(str_detect(dataset, "LiDAR"), "LiDAR",
                      ifelse(str_detect(dataset, "RGB"), "SfM", NA)),
         date = dataset %>% 
           str_split("_", simplify = T) %>% 
           .[, 1] %>% 
           as_date() %>% 
           as.character() %>% 
           as.factor(),
         site_res = ifelse(str_detect(dataset, "Deep") & str_detect(dataset, "LiDAR"), "Site 1",
                    ifelse(str_detect(dataset, "Shallow") & str_detect(dataset, "LiDAR"), "Site 2",
                    ifelse(str_detect(dataset, "35"), "2 cm", 
                    ifelse(str_detect(dataset, "70"), "4 cm",
                    ifelse(str_detect(dataset, "110"), "6 cm", NA)))))
         )

px_vals_flat$dataset <- as.factor(px_vals_flat$dataset)
px_vals_flat$dataset <- factor(px_vals_flat$dataset, levels = c("20210317_20210316_Deep_LiDAR_diff",
                                                      "20210318_20210316_Shallow_LiDAR_diff",
                                                      "20210506_20210505_Deep_RGB_35_diff",
                                                      "20210506_20210505_Deep_RGB_70_diff",
                                                      "20210506_20210505_Deep_RGB_110_diff"))

##############################################################
### Sample same number of pixels for lidar at site 1 and 2 ###
##############################################################

lidar_n <- px_vals_flat %>% 
  group_by(class, site_res) %>% 
  summarise(n = n()) %>%
  ungroup() %>% 
  filter(site_res == "Site 1") %>% 
  select(n) %>% 
  unlist()

site_2 <- px_vals_flat %>% 
  filter(site_res == "Site 2") %>% 
  .[sample(1:nrow(.), lidar_n),]

px_vals_flat <- px_vals_flat %>% 
  filter(site_res != "Site 2")

px_vals_flat <- px_vals_flat %>% 
  rbind(., site_2)

##############################################################

###############
### TABLE 3 ###
###############
calc_rmse <- function(x) sqrt(mean(x^2))

px_vals_flat %>%
  group_by(method, site_res) %>% 
  summarise(bias = mean(value),
            mean_absdiff = mean(abs(value)),
            rmse = calc_rmse(value))

################
### FIGURE 8 ###
################

labels <- px_vals_flat %>%
  arrange(dataset) %>% 
  filter(!duplicated(dataset))

px_vals_flat$dataset <- factor(x = px_vals_flat$dataset, levels = c("20210318_20210316_Shallow_LiDAR_diff", "20210317_20210316_Deep_LiDAR_diff",  "20210506_20210505_Deep_RGB_110_diff", "20210506_20210505_Deep_RGB_70_diff", "20210506_20210505_Deep_RGB_35_diff"))

plot_stats(data = px_vals_flat, 
           x = value, 
           y = dataset,
           colour_by = method,
           scale = 5,
           xlim = c(-15, 15)) +
  theme(legend.key = element_rect(colour = "black", size = 1.7),
        legend.position = c(0.14, 0.15),
        legend.title = element_blank(),
        legend.direction = "vertical"
        ) +
  scale_fill_manual(breaks = c("SfM", "LiDAR"), values = RColorBrewer::brewer.pal(11, "PiYG")[c(3, 9)]) +
  geom_label(data = labels,
            aes(x = 0, y = dataset, label = site_res, colour = Method),
            alpha = 0.5,
            fontface = "bold",
            colour = "black",
            show.legend = F,
            size = 22 / .pt,
            position = position_nudge(x = 9.5, y = 0.58))

ggsave("./figures/figure_8.png",
       width = 10,
       height = 10*0.8)
```
